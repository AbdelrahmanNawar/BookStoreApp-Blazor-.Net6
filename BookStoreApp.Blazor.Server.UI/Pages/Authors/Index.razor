@page "/authors/"
@inject IAuthorService _authorService
@inject IJSRuntime _js

<h3>Index</h3>

@if (!response.Success)
{
    <div class="alert alert-danger">
        <h3> @response.Message </h3>
    </div>
}
else
{
    @if (Authors is null)
    {
        <div class="alert alert-info">
            <h3> Loading Data...</h3>
        </div>
    }
    else
    {
        <AuthorizeView Roles="@AuthenticationConstants.Admin">
            <a class="btn btn-primary" href="/authors/create/">
                <span class="oi oi-plus" aria-hidden="true" />
                Create
            </a>
        </AuthorizeView>

        <br />
        <table class="table table-responsive">
            <thead>
                <tr>
                    <th> First Name </th>
                    <th> Last Name </th>
                    <th> Actions </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var author in Authors)
                {
                    <tr>
                        <td> @author.FirstName </td>
                        <td> @author.LastName </td>
                        <td>
                            <a class="btn btn-primary" href="/authors/details/@author.Id.ToString()"> <span class="oi oi-book" aria-hidden="true" /> Details </a>
                            <AuthorizeView Roles="@AuthenticationConstants.Admin">
                                <a class="btn btn-warning" href="/authors/update/@author.Id.ToString()"> <span class="oi oi-pencil" aria-hidden="true" /> Edit </a>
                                <button class="btn btn-danger" @onclick=@(()=> DeleteAuthorAsync(@author.Id))> <span class="oi oi-delete" aria-hidden="true" /> Delete </button>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private List<AuthorReadOnlyDto> Authors;
    private Response<List<AuthorReadOnlyDto>> response = new Response<List<AuthorReadOnlyDto>> { Success = true };

    protected override async Task OnInitializedAsync()
    {
        response = await _authorService.GetAuthorsAsync();
        if (response.Success)
            Authors = response.Data;
    }

    private async Task DeleteAuthorAsync(int authorId)
    {
        var author = Authors.FirstOrDefault(a => a.Id == authorId);
        if (author is not null)
        {
            var confirm = await _js.InvokeAsync<bool>("confirm", $"Are you sure your want to delete {author.FirstName ?? ""} {author.LastName ?? ""}");
            if (confirm)
            {
                var response = await _authorService.DeleteAuthorAsync(authorId);
                if (response.Success)
                    await OnInitializedAsync();
            }
        }
    }
}
