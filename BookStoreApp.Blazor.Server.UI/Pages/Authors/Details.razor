@page "/authors/details/{id:int}"
@inject IAuthorService _authorService
@inject NavigationManager _navManager

<h3> Author Details </h3>

<EditForm Model="Author">
    <fieldset disabled="true">
        <div class="form-group">
            <label for="firstname"> First Name </label> @* another way to display the data => - @Author.FirstName*@
            <InputText @bind-Value="Author.FirstName" class="form-control" id="firstname" />
            <ValidationMessage For="@(()=>Author.FirstName)" />
        </div>
        <br />
        <div class="form-group">
            <label for="lasstname"> Last Name </label>
            <InputText @bind-Value="Author.LastName" class="form-control" id="lastname" />
            <ValidationMessage For="@(()=>Author.LastName)" />
        </div>
        <br />
        <div class="form-group">
            <label for="bio"> Biography </label>
            <InputText @bind-Value="Author.Bio" class="form-control" id="bio" />
            <ValidationMessage For="@(()=>Author.Bio)" />
        </div>
    </fieldset>

    <br />

    @if (Author.Books is not null && Author.Books.Any())
    {
        foreach (var book in Author.Books)
        {
            <div class="card" style="width: 18rem;">
                <img class="card-img-top" src="@book.Image" alt="@book.Title">
                <div class="card-body">
                    <h5 class="card-title">@book.Title - @book.Price.ToString("C")</h5>
                    <p class="card-text"></p>
                    <a href="#" class="btn btn-primary"> View book </a>
                </div>
            </div>
        }
    }
    else
    {
        <div class="alert alert-dismissible alert-secondary">
            No Books Available For This Author.
        </div>
    }

    <br />
    <div>
        <AuthorizeView Roles="@AuthenticationConstants.Admin">
            <button @onclick="GotToUpdate" class="btn btn-warning">
                <span class="oi oi-pencil"></span>
                Update Author
            </button>
        </AuthorizeView>

        <button @onclick="BackToList" class="btn btn-outline-secondary">
            <span class="oi oi-media-skip-backward"></span>
            Back To List
        </button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }
    private AuthorDetailsDto Author = new AuthorDetailsDto();

    protected async override Task OnInitializedAsync()
    {
        var response = await _authorService.GetAuthorByIdAsync(id);
        if (response.Success)
            Author = response.Data;
    }
    private void GotToUpdate() => _navManager.NavigateTo($"/authors/update/{id.ToString()}");
    private void BackToList() => _navManager.NavigateTo("/authors/");

}
