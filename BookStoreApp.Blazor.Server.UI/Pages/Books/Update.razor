@page "/books/update/{id:int}"
@inject IBookService _bookService
@inject IAuthorService _authorService
@inject NavigationManager _navManager
@inject IMapper _mapper
@attribute [Authorize(Roles = AuthenticationConstants.Admin)]

<h3> Update Book </h3>

<EditForm Model="@Book" OnValidSubmit="@HandleUpdateBook">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="tile"> Book Title </label>
        <InputText @bind-Value="Book.Title" class="form-control" id="title" />
        <ValidationMessage For="@(()=> Book.Title)"/>
    </div>
    <br />
    <div class="form-group">
        <label for="isbn"> ISBN </label>
        <InputText @bind-Value="Book.Isbn" class="form-control" id="isbn" />
        <ValidationMessage For="@(()=> Book.Isbn)"/>
    </div>
    <br />
    <div class="form-group">
        <label for="price"> Price </label>
        <InputNumber @bind-Value="Book.Price" class="form-control" id="price" />
        <ValidationMessage For="@(()=> Book.Price)" />
    </div>
    <br />
    <div class="form-group">
        <label for="year"> Year </label>
        <InputNumber @bind-Value="Book.Year" class="form-control" id="year" />
        <ValidationMessage For="@(()=> Book.Year)"/>
    </div>
    <br />
    <div class="form-group">
        <label for="summary"> Summary </label>
        <InputTextArea @bind-Value="Book.Summary" class="form-control" id="summary" />
        <ValidationMessage For="@(()=> Book.Summary)" />
    </div>
    <br />
    <div class="form-group">
        <label for="authors"> Authors </label>
        <InputSelect @bind-Value="Book.AuthorId" class="form-select" id="authors">
            <option value="@Book.AuthorId"> @Authors.FirstOrDefault(a=>a.Id == Book.AuthorId)?.FirstName @Authors.FirstOrDefault(a=>a.Id == Book.AuthorId)?.LastName </option>
            @foreach (var author in Authors)
            {
                <option value="@author.Id"> @author.FirstName @author.LastName </option>
            }
        </InputSelect>
    </div>
    <br />
    <div class="form-group">
        <label> Book Cover Photo </label>
        <div>
            <InputFile OnChange="HandleFileSelection" />
            @if (!string.IsNullOrEmpty(Img))
            {
                <img src="@Img" width="100" height="1000" class="img-thumbnail" />
            }
            <p class="text-danger"> @UploadFileWarning </p>
        </div>
    </div>
    <br />
    <div>
        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil"></span>
            Update Book
        </button>
        <button @onclick="BackToList" class="btn btn-outline-secondary" type="button">
            <span class="oi oi-media-skip-backward"></span>
            Back To List
        </button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int id { get; set; }
    private BookUpdateDto Book = new();
    private List<AuthorReadOnlyDto> Authors = new();
    private string UploadFileWarning = string.Empty;
    private string Img = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        var bookResponse = await _bookService.GetBookByIdAsync(id);
        if (bookResponse.Success)
        {
            Book = _mapper.Map<BookUpdateDto>(bookResponse.Data);
            Img = bookResponse.Data.ImageURL;

            var authorsResponse = await _authorService.GetAuthorsAsync();
            if (authorsResponse.Success)
                Authors = authorsResponse.Data;
        }
    }

    private async Task HandleUpdateBook()
    {
        var response = await _bookService.UpdateBookAsync(id, Book);
        if (response.Success)
            BackToList();
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file is not null)
        {
            var ext = System.IO.Path.GetExtension(file.Name);
            if (ext.ToLower().Contains("jpg") || ext.ToLower().Contains("png") || ext.ToLower().Contains("jpeg"))
            {
                var byteArray = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(byteArray);
                string imageType = file.ContentType;
                string base64String = Convert.ToBase64String(byteArray);

                Book.ImageData = base64String;
                Book.OriginalImageName = file.Name;
                Img = $"data:{imageType}; base64, {base64String}";
            }
            else
            {
                UploadFileWarning = "Please select a valid image file (*.jpg | *.png | *.jpeg)";
            }
        }
    }

    private void BackToList() => _navManager.NavigateTo("/books/");

}
