@page "/users/login"
@inject IAuthenticationService authService
@inject NavigationManager _navManager

<h3>Login</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger">
        <p> @message </p>
    </div>
}

<div>
    <EditForm Model="LoginModel" OnValidSubmit="HandleLoginAsync">

        @* enforcing the validations *@
        <DataAnnotationsValidator />
        @* print out all validation summary when anything is invalid*@
        <ValidationSummary />

        <div class="form-group">
            <label for="Email"> Email Address </label>
            <InputText class="form-control" @bind-Value="LoginModel.Email" />
            <ValidationMessage For="@(()=> LoginModel.Email)" />
        </div>
        <br />
        <div class="form-group">
            <label for="Password"> Password </label>
            <InputText class="form-control" type="password" @bind-Value="LoginModel.Password" />
            <ValidationMessage For="@(()=> LoginModel.Password)" />
        </div>
        <br />
        <button type="submit" class="btn btn-primary btn-block"> Login </button>
    </EditForm>
</div>
@code {
    LoginUserDto LoginModel = new LoginUserDto();

    string message = string.Empty;

    @* fired when everything is valid *@
    private async Task HandleLoginAsync()
    {
        try
        {
            var response = await authService.AuthenticateAsync(LoginModel);
            if (response)
            {
                _navManager.NavigateTo("/");
            }
            message = "Invalid Credentials, Please Try Again";
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode >= 200 && ex.StatusCode <= 299)

            message = ex.Response;
        }
        catch (Exception ex)
        {
        }
    }

}
